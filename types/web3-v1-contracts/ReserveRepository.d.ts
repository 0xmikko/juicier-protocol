/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ReserveRepository extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ReserveRepository;
  clone(): ReserveRepository;
  methods: {
    addReserve(
      _reserve: string,
      _vTokenAddress: string,
      _loanToValue: number | string,
      _liquidationThreshold: number | string,
      _liquidationBonus: number | string
    ): NonPayableTransactionObject<void>;

    isReserveActive(_reserve: string): NonPayableTransactionObject<boolean>;

    getTotalLiquidity(_reserve: string): NonPayableTransactionObject<string>;

    setTotalLiquidity(
      _reserve: string,
      _totalLiquidity: number | string
    ): NonPayableTransactionObject<void>;

    getAvailableLiquidity(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    setAvailableLiquidity(
      _reserve: string,
      _availableLiquidity: number | string
    ): NonPayableTransactionObject<void>;

    addLiquidity(
      _reserve: string,
      _liquidity: number | string
    ): NonPayableTransactionObject<void>;

    setTokenContract(
      _reserve: string,
      _contractAddress: string
    ): NonPayableTransactionObject<void>;

    getVTokenContract(_reserve: string): NonPayableTransactionObject<string>;

    isActive(_reserve: string): NonPayableTransactionObject<boolean>;

    setActive(
      _reserve: string,
      _active: boolean
    ): NonPayableTransactionObject<void>;

    getLoanToValue(_reserve: string): NonPayableTransactionObject<string>;

    getLiquidationThreshold(
      _reserve: string
    ): NonPayableTransactionObject<string>;

    getLiquidationBonus(_reserve: string): NonPayableTransactionObject<string>;

    getReserveSymbol(_reserve: string): NonPayableTransactionObject<string>;

    getReservesQty(): NonPayableTransactionObject<string>;

    getReserveByIndex(
      _index: number | string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
