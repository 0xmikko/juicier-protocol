/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ILendingProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ILendingProvider;
  clone(): ILendingProvider;
  methods: {
    /**
     * Deposit asset to selected lending provider
     */
    deposit(
      _reserve: string,
      _amount: number | string
    ): PayableTransactionObject<void>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: number | string
    ): NonPayableTransactionObject<void>;

    /**
     * Resereves methods
     */
    getReserves(): NonPayableTransactionObject<string[]>;

    getReserveData(
      _reserveAddress: string
    ): NonPayableTransactionObject<{
      totalLiquidity: string;
      availableLiquidity: string;
      totalBorrowsVariable: string;
      liquidityRate: string;
      variableBorrowRate: string;
      utilizationRate: string;
      liquidityIndex: string;
      variableBorrowIndex: string;
      aTokenAddress: string;
      lastUpdateTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    getReserveLiquidityRate(
      _reserveAddress: string
    ): NonPayableTransactionObject<string>;

    getReserveBorrowRate(
      _reserveAddress: string
    ): NonPayableTransactionObject<string>;

    getAvaibleLiquidity(_reserve: string): NonPayableTransactionObject<string>;

    getReserveManagerForApprove(
      _reserve: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
