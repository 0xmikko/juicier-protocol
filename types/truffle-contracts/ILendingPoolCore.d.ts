/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILendingPoolCoreContract
  extends Truffle.Contract<ILendingPoolCoreInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILendingPoolCoreInstance>;
}

export interface ReserveUpdated {
  name: "ReserveUpdated";
  args: {
    reserve: string;
    liquidityRate: BN;
    stableBorrowRate: BN;
    variableBorrowRate: BN;
    liquidityIndex: BN;
    variableBorrowIndex: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

type AllEvents = ReserveUpdated;

export interface ILendingPoolCoreInstance extends Truffle.ContractInstance {
  /**
   * updates the state of the core as a result of a deposit action
   * @param _amount the amount being deposited
   * @param _isFirstDeposit true if the user is depositing for the first time*
   * @param _reserve the address of the reserve in which the deposit is happening
   * @param _user the address of the the user depositing
   */
  updateStateOnDeposit: {
    (
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      _isFirstDeposit: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      _isFirstDeposit: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      _isFirstDeposit: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      _isFirstDeposit: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the state of the core as a result of a redeem action
   * @param _amountRedeemed the amount being redeemed
   * @param _reserve the address of the reserve in which the redeem is happening
   * @param _user the address of the the user redeeming
   * @param _userRedeemedEverything true if the user is redeeming everything*
   */
  updateStateOnRedeem: {
    (
      _reserve: string,
      _user: string,
      _amountRedeemed: number | BN | string,
      _userRedeemedEverything: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _amountRedeemed: number | BN | string,
      _userRedeemedEverything: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _amountRedeemed: number | BN | string,
      _userRedeemedEverything: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _amountRedeemed: number | BN | string,
      _userRedeemedEverything: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the state of the core as a result of a flashloan action
   * @param _income the income of the protocol as a result of the action*
   * @param _reserve the address of the reserve in which the flashloan is happening
   */
  updateStateOnFlashLoan: {
    (
      _reserve: string,
      _availableLiquidityBefore: number | BN | string,
      _income: number | BN | string,
      _protocolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _availableLiquidityBefore: number | BN | string,
      _income: number | BN | string,
      _protocolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _availableLiquidityBefore: number | BN | string,
      _income: number | BN | string,
      _protocolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _availableLiquidityBefore: number | BN | string,
      _income: number | BN | string,
      _protocolFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the state of the core as a consequence of a repay action.
   * @param _balanceIncrease the accrued interest on the borrowed amount
   * @param _originationFeeRepaid the fee on the amount that is being repaid
   * @param _paybackAmountMinusFees the amount being paid back minus fees
   * @param _repaidWholeLoan true if the user is repaying the whole loan*
   * @param _reserve the address of the reserve on which the user is repaying
   * @param _user the address of the borrower
   */
  updateStateOnRepay: {
    (
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: number | BN | string,
      _originationFeeRepaid: number | BN | string,
      _balanceIncrease: number | BN | string,
      _repaidWholeLoan: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: number | BN | string,
      _originationFeeRepaid: number | BN | string,
      _balanceIncrease: number | BN | string,
      _repaidWholeLoan: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: number | BN | string,
      _originationFeeRepaid: number | BN | string,
      _balanceIncrease: number | BN | string,
      _repaidWholeLoan: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _paybackAmountMinusFees: number | BN | string,
      _originationFeeRepaid: number | BN | string,
      _balanceIncrease: number | BN | string,
      _repaidWholeLoan: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the state of the core as a consequence of a liquidation action.
   * @param _amountToLiquidate the amount being repaid by the liquidator
   * @param _balanceIncrease the accrued interest on the borrowed amount
   * @param _collateralReserve the address of the collateral reserve that is being liquidated
   * @param _collateralToLiquidate the amount of collateral being liquidated
   * @param _feeLiquidated the amount of origination fee being liquidated
   * @param _liquidatedCollateralForFee the amount of collateral equivalent to the origination fee + bonus
   * @param _liquidatorReceivesAToken true if the liquidator will receive aTokens, false otherwise*
   * @param _principalReserve the address of the principal reserve that is being repaid
   * @param _user the address of the borrower
   */
  updateStateOnLiquidation: {
    (
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: number | BN | string,
      _collateralToLiquidate: number | BN | string,
      _feeLiquidated: number | BN | string,
      _liquidatedCollateralForFee: number | BN | string,
      _balanceIncrease: number | BN | string,
      _liquidatorReceivesAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: number | BN | string,
      _collateralToLiquidate: number | BN | string,
      _feeLiquidated: number | BN | string,
      _liquidatedCollateralForFee: number | BN | string,
      _balanceIncrease: number | BN | string,
      _liquidatorReceivesAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: number | BN | string,
      _collateralToLiquidate: number | BN | string,
      _feeLiquidated: number | BN | string,
      _liquidatedCollateralForFee: number | BN | string,
      _balanceIncrease: number | BN | string,
      _liquidatorReceivesAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _principalReserve: string,
      _collateralReserve: string,
      _user: string,
      _amountToLiquidate: number | BN | string,
      _collateralToLiquidate: number | BN | string,
      _feeLiquidated: number | BN | string,
      _liquidatedCollateralForFee: number | BN | string,
      _balanceIncrease: number | BN | string,
      _liquidatorReceivesAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the state of the core as a consequence of a stable rate rebalance
   * @param _balanceIncrease the accrued interest on the borrowed amount
   * @param _reserve the address of the principal reserve where the user borrowed
   * @param _user the address of the borrower
   */
  updateStateOnRebalance: {
    (
      _reserve: string,
      _user: string,
      _balanceIncrease: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _balanceIncrease: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _balanceIncrease: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _balanceIncrease: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * transfers to the user a specific amount from the reserve.
   * @param _amount the amount being transferred*
   * @param _reserve the address of the reserve where the transfer is happening
   * @param _user the address of the user receiving the transfer
   */
  transferToUser: {
    (
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * transfers the protocol fees to the fees collection address
   * @param _amount the amount being transferred
   * @param _destination the fee receiver address*
   * @param _token the address of the token being transferred
   * @param _user the address of the user from where the transfer is happening
   */
  transferToFeeCollectionAddress: {
    (
      _token: string,
      _user: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _user: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _user: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _user: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * transfers the fees to the fees collection address in the case of liquidation
   * @param _amount the amount being transferred
   * @param _destination the fee receiver address*
   * @param _token the address of the token being transferred
   */
  liquidateFee: {
    (
      _token: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * transfers an amount from a user to the destination reserve
   * @param _amount the amount being transferred*
   * @param _reserve the address of the reserve where the amount is being transferred
   * @param _user the address of the user from where the transfer is happening
   */
  transferToReserve: {
    (
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * returns the basic data (balances, fee accrued, reserve enabled/disabled as collateral) needed to calculate the global account data in the LendingPoolDataProvider
   * @param _reserve the address of the reserve
   * @param _user the address of the user
   */
  getUserBasicReserveData(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, boolean]>;

  /**
   * checks if a user is allowed to borrow at a stable rate
   * @param _amount the amount the the user wants to borrow
   * @param _reserve the reserve address
   * @param _user the user
   */
  isUserAllowedToBorrowAtStable(
    _reserve: string,
    _user: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * gets the normalized income of the reserve. a value of 1e27 means there is no income. A value of 2e27 means there there has been 100% income.
   * @param _reserve the reserve address
   */
  getReserveNormalizedIncome(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve total borrows stable
   * @param _reserve the reserve address
   */
  getReserveTotalBorrowsStable(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve total borrows variable
   * @param _reserve the reserve address
   */
  getReserveTotalBorrowsVariable(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve liquidation threshold
   * @param _reserve the reserve address
   */
  getReserveLiquidationThreshold(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve liquidation bonus
   * @param _reserve the reserve address
   */
  getReserveLiquidationBonus(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve current variable borrow rate. Is the base variable borrow rate if the reserve is empty
   * @param _reserve the reserve address
   */
  getReserveCurrentVariableBorrowRate(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve average stable borrow rate. The average stable rate is the weighted average of all the loans taken at stable rate.
   * @param _reserve the reserve address
   */
  getReserveCurrentAverageStableBorrowRate(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve liquidity rate
   * @param _reserve the reserve address
   */
  getReserveCurrentLiquidityRate(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve liquidity cumulative index
   * @param _reserve the reserve address
   */
  getReserveLiquidityCumulativeIndex(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * gets the reserve variable borrow index
   * @param _reserve the reserve address
   */
  getReserveVariableBorrowsCumulativeIndex(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * this function aggregates the configuration parameters of the reserve. It's used in the LendingPoolDataProvider specifically to save gas, and avoid multiple external contract calls to fetch the same data.
   * @param _reserve the reserve address
   */
  getReserveConfiguration(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, boolean]>;

  /**
   * returns the decimals of the reserve
   * @param _reserve the reserve address
   */
  getReserveDecimals(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * returns true if the reserve is enabled for borrowing
   * @param _reserve the reserve address
   */
  isReserveBorrowingEnabled(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * returns true if the reserve is enabled as collateral
   * @param _reserve the reserve address
   */
  isReserveUsageAsCollateralEnabled(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * returns true if the stable rate is enabled on reserve
   * @param _reserve the reserve address
   */
  getReserveIsStableBorrowRateEnabled(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * returns true if the reserve is active
   * @param _reserve the reserve address
   */
  getReserveIsActive(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * returns if a reserve is freezed
   * @param _reserve the reserve for which the information is needed
   */
  getReserveIsFreezed(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * returns the timestamp of the last action on the reserve
   * @param _reserve the reserve for which the information is needed
   */
  getReserveLastUpdate(
    _reserve: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   */
  getReserves(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  /**
   * @param _reserve the address of the reserve for which the information is needed
   * @param _user the address of the user for which the information is needed
   */
  isUserUseReserveAsCollateralEnabled(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * @param _reserve the address of the reserve for which the information is needed
   * @param _user the address of the user for which the information is needed
   */
  getUserOriginationFee(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * the stable rate returned is 0 if the user is borrowing at variable or not borrowing at all
   * @param _reserve the address of the reserve for which the information is needed
   * @param _user the address of the user for which the information is needed
   */
  getUserCurrentStableBorrowRate(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable
   * @param _reserve the address of the reserve for which the information is needed
   * @param _user the address of the user for which the information is needed
   */
  getUserVariableBorrowCumulativeIndex(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable
   * @param _reserve the address of the reserve for which the information is needed
   * @param _user the address of the user for which the information is needed
   */
  getUserLastUpdate(
    _reserve: string,
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * updates the lending pool core configuration*
   */
  refreshConfiguration: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * initializes a reserve
   * @param _aTokenAddress the address of the overlying aToken contract
   * @param _decimals the decimals of the reserve currency
   * @param _interestRateStrategyAddress the address of the interest rate strategy contract*
   * @param _reserve the address of the reserve
   */
  initReserve: {
    (
      _reserve: string,
      _aTokenAddress: string,
      _decimals: number | BN | string,
      _interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: number | BN | string,
      _interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: number | BN | string,
      _interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _aTokenAddress: string,
      _decimals: number | BN | string,
      _interestRateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * removes the last added reserve in the reservesList array
   * @param _reserveToRemove the address of the reserve*
   */
  removeLastAddedReserve: {
    (_reserveToRemove: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserveToRemove: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserveToRemove: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserveToRemove: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * updates the address of the interest rate strategy contract
   * @param _rateStrategyAddress the address of the interest rate strategy contract*
   * @param _reserve the address of the reserve
   */
  setReserveInterestRateStrategyAddress: {
    (
      _reserve: string,
      _rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _rateStrategyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * enables borrowing on a reserve. Also sets the stable rate borrowing
   * @param _reserve the address of the reserve
   * @param _stableBorrowRateEnabled true if the stable rate needs to be enabled, false otherwise*
   */
  enableBorrowingOnReserve: {
    (
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * disables borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  disableBorrowingOnReserve: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * enables a reserve to be used as collateral
   * @param _reserve the address of the reserve*
   */
  enableReserveAsCollateral: {
    (
      _reserve: string,
      _baseLTVasCollateral: number | BN | string,
      _liquidationThreshold: number | BN | string,
      _liquidationBonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _baseLTVasCollateral: number | BN | string,
      _liquidationThreshold: number | BN | string,
      _liquidationBonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _baseLTVasCollateral: number | BN | string,
      _liquidationThreshold: number | BN | string,
      _liquidationBonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _baseLTVasCollateral: number | BN | string,
      _liquidationThreshold: number | BN | string,
      _liquidationBonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * disables a reserve to be used as collateral
   * @param _reserve the address of the reserve*
   */
  disableReserveAsCollateral: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * enable the stable borrow rate mode on a reserve
   * @param _reserve the address of the reserve*
   */
  enableReserveStableBorrowRate: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * disable the stable borrow rate mode on a reserve
   * @param _reserve the address of the reserve*
   */
  disableReserveStableBorrowRate: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * activates a reserve
   * @param _reserve the address of the reserve*
   */
  activateReserve: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * deactivates a reserve
   * @param _reserve the address of the reserve*
   */
  deactivateReserve: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to freeze the reserve. A freezed reserve does not allow any action apart from repay, redeem, liquidationCall, rebalance.
   * @param _reserve the address of the reserve*
   */
  freezeReserve: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to unfreeze the reserve. A unfreezed reserve allows any action to be executed.
   * @param _reserve the address of the reserve*
   */
  unfreezeReserve: {
    (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to update the loan to value of a reserve
   * @param _ltv the new loan to value*
   * @param _reserve the address of the reserve
   */
  setReserveBaseLTVasCollateral: {
    (
      _reserve: string,
      _ltv: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _ltv: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _ltv: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _ltv: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to update the liquidation threshold of a reserve
   * @param _reserve the address of the reserve
   * @param _threshold the new liquidation threshold*
   */
  setReserveLiquidationThreshold: {
    (
      _reserve: string,
      _threshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _threshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _threshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _threshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to update the liquidation bonus of a reserve
   * @param _bonus the new liquidation bonus*
   * @param _reserve the address of the reserve
   */
  setReserveLiquidationBonus: {
    (
      _reserve: string,
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _bonus: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * allows the configurator to update the reserve decimals
   * @param _decimals the decimals of the reserve*
   * @param _reserve the address of the reserve
   */
  setReserveDecimals: {
    (
      _reserve: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * updates the state of the core as a result of a deposit action
     * @param _amount the amount being deposited
     * @param _isFirstDeposit true if the user is depositing for the first time*
     * @param _reserve the address of the reserve in which the deposit is happening
     * @param _user the address of the the user depositing
     */
    updateStateOnDeposit: {
      (
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        _isFirstDeposit: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        _isFirstDeposit: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        _isFirstDeposit: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        _isFirstDeposit: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the state of the core as a result of a redeem action
     * @param _amountRedeemed the amount being redeemed
     * @param _reserve the address of the reserve in which the redeem is happening
     * @param _user the address of the the user redeeming
     * @param _userRedeemedEverything true if the user is redeeming everything*
     */
    updateStateOnRedeem: {
      (
        _reserve: string,
        _user: string,
        _amountRedeemed: number | BN | string,
        _userRedeemedEverything: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _amountRedeemed: number | BN | string,
        _userRedeemedEverything: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _amountRedeemed: number | BN | string,
        _userRedeemedEverything: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _amountRedeemed: number | BN | string,
        _userRedeemedEverything: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the state of the core as a result of a flashloan action
     * @param _income the income of the protocol as a result of the action*
     * @param _reserve the address of the reserve in which the flashloan is happening
     */
    updateStateOnFlashLoan: {
      (
        _reserve: string,
        _availableLiquidityBefore: number | BN | string,
        _income: number | BN | string,
        _protocolFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _availableLiquidityBefore: number | BN | string,
        _income: number | BN | string,
        _protocolFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _availableLiquidityBefore: number | BN | string,
        _income: number | BN | string,
        _protocolFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _availableLiquidityBefore: number | BN | string,
        _income: number | BN | string,
        _protocolFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the state of the core as a consequence of a repay action.
     * @param _balanceIncrease the accrued interest on the borrowed amount
     * @param _originationFeeRepaid the fee on the amount that is being repaid
     * @param _paybackAmountMinusFees the amount being paid back minus fees
     * @param _repaidWholeLoan true if the user is repaying the whole loan*
     * @param _reserve the address of the reserve on which the user is repaying
     * @param _user the address of the borrower
     */
    updateStateOnRepay: {
      (
        _reserve: string,
        _user: string,
        _paybackAmountMinusFees: number | BN | string,
        _originationFeeRepaid: number | BN | string,
        _balanceIncrease: number | BN | string,
        _repaidWholeLoan: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _paybackAmountMinusFees: number | BN | string,
        _originationFeeRepaid: number | BN | string,
        _balanceIncrease: number | BN | string,
        _repaidWholeLoan: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _paybackAmountMinusFees: number | BN | string,
        _originationFeeRepaid: number | BN | string,
        _balanceIncrease: number | BN | string,
        _repaidWholeLoan: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _paybackAmountMinusFees: number | BN | string,
        _originationFeeRepaid: number | BN | string,
        _balanceIncrease: number | BN | string,
        _repaidWholeLoan: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the state of the core as a consequence of a liquidation action.
     * @param _amountToLiquidate the amount being repaid by the liquidator
     * @param _balanceIncrease the accrued interest on the borrowed amount
     * @param _collateralReserve the address of the collateral reserve that is being liquidated
     * @param _collateralToLiquidate the amount of collateral being liquidated
     * @param _feeLiquidated the amount of origination fee being liquidated
     * @param _liquidatedCollateralForFee the amount of collateral equivalent to the origination fee + bonus
     * @param _liquidatorReceivesAToken true if the liquidator will receive aTokens, false otherwise*
     * @param _principalReserve the address of the principal reserve that is being repaid
     * @param _user the address of the borrower
     */
    updateStateOnLiquidation: {
      (
        _principalReserve: string,
        _collateralReserve: string,
        _user: string,
        _amountToLiquidate: number | BN | string,
        _collateralToLiquidate: number | BN | string,
        _feeLiquidated: number | BN | string,
        _liquidatedCollateralForFee: number | BN | string,
        _balanceIncrease: number | BN | string,
        _liquidatorReceivesAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _principalReserve: string,
        _collateralReserve: string,
        _user: string,
        _amountToLiquidate: number | BN | string,
        _collateralToLiquidate: number | BN | string,
        _feeLiquidated: number | BN | string,
        _liquidatedCollateralForFee: number | BN | string,
        _balanceIncrease: number | BN | string,
        _liquidatorReceivesAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _principalReserve: string,
        _collateralReserve: string,
        _user: string,
        _amountToLiquidate: number | BN | string,
        _collateralToLiquidate: number | BN | string,
        _feeLiquidated: number | BN | string,
        _liquidatedCollateralForFee: number | BN | string,
        _balanceIncrease: number | BN | string,
        _liquidatorReceivesAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _principalReserve: string,
        _collateralReserve: string,
        _user: string,
        _amountToLiquidate: number | BN | string,
        _collateralToLiquidate: number | BN | string,
        _feeLiquidated: number | BN | string,
        _liquidatedCollateralForFee: number | BN | string,
        _balanceIncrease: number | BN | string,
        _liquidatorReceivesAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the state of the core as a consequence of a stable rate rebalance
     * @param _balanceIncrease the accrued interest on the borrowed amount
     * @param _reserve the address of the principal reserve where the user borrowed
     * @param _user the address of the borrower
     */
    updateStateOnRebalance: {
      (
        _reserve: string,
        _user: string,
        _balanceIncrease: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _balanceIncrease: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _balanceIncrease: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _balanceIncrease: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * transfers to the user a specific amount from the reserve.
     * @param _amount the amount being transferred*
     * @param _reserve the address of the reserve where the transfer is happening
     * @param _user the address of the user receiving the transfer
     */
    transferToUser: {
      (
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * transfers the protocol fees to the fees collection address
     * @param _amount the amount being transferred
     * @param _destination the fee receiver address*
     * @param _token the address of the token being transferred
     * @param _user the address of the user from where the transfer is happening
     */
    transferToFeeCollectionAddress: {
      (
        _token: string,
        _user: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _user: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _user: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _user: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * transfers the fees to the fees collection address in the case of liquidation
     * @param _amount the amount being transferred
     * @param _destination the fee receiver address*
     * @param _token the address of the token being transferred
     */
    liquidateFee: {
      (
        _token: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * transfers an amount from a user to the destination reserve
     * @param _amount the amount being transferred*
     * @param _reserve the address of the reserve where the amount is being transferred
     * @param _user the address of the user from where the transfer is happening
     */
    transferToReserve: {
      (
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _user: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * returns the basic data (balances, fee accrued, reserve enabled/disabled as collateral) needed to calculate the global account data in the LendingPoolDataProvider
     * @param _reserve the address of the reserve
     * @param _user the address of the user
     */
    getUserBasicReserveData(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, boolean]>;

    /**
     * checks if a user is allowed to borrow at a stable rate
     * @param _amount the amount the the user wants to borrow
     * @param _reserve the reserve address
     * @param _user the user
     */
    isUserAllowedToBorrowAtStable(
      _reserve: string,
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * gets the normalized income of the reserve. a value of 1e27 means there is no income. A value of 2e27 means there there has been 100% income.
     * @param _reserve the reserve address
     */
    getReserveNormalizedIncome(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve total borrows stable
     * @param _reserve the reserve address
     */
    getReserveTotalBorrowsStable(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve total borrows variable
     * @param _reserve the reserve address
     */
    getReserveTotalBorrowsVariable(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve liquidation threshold
     * @param _reserve the reserve address
     */
    getReserveLiquidationThreshold(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve liquidation bonus
     * @param _reserve the reserve address
     */
    getReserveLiquidationBonus(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve current variable borrow rate. Is the base variable borrow rate if the reserve is empty
     * @param _reserve the reserve address
     */
    getReserveCurrentVariableBorrowRate(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve average stable borrow rate. The average stable rate is the weighted average of all the loans taken at stable rate.
     * @param _reserve the reserve address
     */
    getReserveCurrentAverageStableBorrowRate(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve liquidity rate
     * @param _reserve the reserve address
     */
    getReserveCurrentLiquidityRate(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve liquidity cumulative index
     * @param _reserve the reserve address
     */
    getReserveLiquidityCumulativeIndex(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * gets the reserve variable borrow index
     * @param _reserve the reserve address
     */
    getReserveVariableBorrowsCumulativeIndex(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * this function aggregates the configuration parameters of the reserve. It's used in the LendingPoolDataProvider specifically to save gas, and avoid multiple external contract calls to fetch the same data.
     * @param _reserve the reserve address
     */
    getReserveConfiguration(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, boolean]>;

    /**
     * returns the decimals of the reserve
     * @param _reserve the reserve address
     */
    getReserveDecimals(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * returns true if the reserve is enabled for borrowing
     * @param _reserve the reserve address
     */
    isReserveBorrowingEnabled(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * returns true if the reserve is enabled as collateral
     * @param _reserve the reserve address
     */
    isReserveUsageAsCollateralEnabled(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * returns true if the stable rate is enabled on reserve
     * @param _reserve the reserve address
     */
    getReserveIsStableBorrowRateEnabled(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * returns true if the reserve is active
     * @param _reserve the reserve address
     */
    getReserveIsActive(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * returns if a reserve is freezed
     * @param _reserve the reserve for which the information is needed
     */
    getReserveIsFreezed(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * returns the timestamp of the last action on the reserve
     * @param _reserve the reserve for which the information is needed
     */
    getReserveLastUpdate(
      _reserve: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     */
    getReserves(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    /**
     * @param _reserve the address of the reserve for which the information is needed
     * @param _user the address of the user for which the information is needed
     */
    isUserUseReserveAsCollateralEnabled(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * @param _reserve the address of the reserve for which the information is needed
     * @param _user the address of the user for which the information is needed
     */
    getUserOriginationFee(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * the stable rate returned is 0 if the user is borrowing at variable or not borrowing at all
     * @param _reserve the address of the reserve for which the information is needed
     * @param _user the address of the user for which the information is needed
     */
    getUserCurrentStableBorrowRate(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable
     * @param _reserve the address of the reserve for which the information is needed
     * @param _user the address of the user for which the information is needed
     */
    getUserVariableBorrowCumulativeIndex(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable
     * @param _reserve the address of the reserve for which the information is needed
     * @param _user the address of the user for which the information is needed
     */
    getUserLastUpdate(
      _reserve: string,
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * updates the lending pool core configuration*
     */
    refreshConfiguration: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * initializes a reserve
     * @param _aTokenAddress the address of the overlying aToken contract
     * @param _decimals the decimals of the reserve currency
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract*
     * @param _reserve the address of the reserve
     */
    initReserve: {
      (
        _reserve: string,
        _aTokenAddress: string,
        _decimals: number | BN | string,
        _interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _aTokenAddress: string,
        _decimals: number | BN | string,
        _interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _aTokenAddress: string,
        _decimals: number | BN | string,
        _interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _aTokenAddress: string,
        _decimals: number | BN | string,
        _interestRateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * removes the last added reserve in the reservesList array
     * @param _reserveToRemove the address of the reserve*
     */
    removeLastAddedReserve: {
      (
        _reserveToRemove: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserveToRemove: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserveToRemove: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserveToRemove: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * updates the address of the interest rate strategy contract
     * @param _rateStrategyAddress the address of the interest rate strategy contract*
     * @param _reserve the address of the reserve
     */
    setReserveInterestRateStrategyAddress: {
      (
        _reserve: string,
        _rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _rateStrategyAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * enables borrowing on a reserve. Also sets the stable rate borrowing
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if the stable rate needs to be enabled, false otherwise*
     */
    enableBorrowingOnReserve: {
      (
        _reserve: string,
        _stableBorrowRateEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _stableBorrowRateEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _stableBorrowRateEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _stableBorrowRateEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableBorrowingOnReserve: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * enables a reserve to be used as collateral
     * @param _reserve the address of the reserve*
     */
    enableReserveAsCollateral: {
      (
        _reserve: string,
        _baseLTVasCollateral: number | BN | string,
        _liquidationThreshold: number | BN | string,
        _liquidationBonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _baseLTVasCollateral: number | BN | string,
        _liquidationThreshold: number | BN | string,
        _liquidationBonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _baseLTVasCollateral: number | BN | string,
        _liquidationThreshold: number | BN | string,
        _liquidationBonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _baseLTVasCollateral: number | BN | string,
        _liquidationThreshold: number | BN | string,
        _liquidationBonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * disables a reserve to be used as collateral
     * @param _reserve the address of the reserve*
     */
    disableReserveAsCollateral: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * enable the stable borrow rate mode on a reserve
     * @param _reserve the address of the reserve*
     */
    enableReserveStableBorrowRate: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * disable the stable borrow rate mode on a reserve
     * @param _reserve the address of the reserve*
     */
    disableReserveStableBorrowRate: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    activateReserve: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    deactivateReserve: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to freeze the reserve. A freezed reserve does not allow any action apart from repay, redeem, liquidationCall, rebalance.
     * @param _reserve the address of the reserve*
     */
    freezeReserve: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to unfreeze the reserve. A unfreezed reserve allows any action to be executed.
     * @param _reserve the address of the reserve*
     */
    unfreezeReserve: {
      (_reserve: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to update the loan to value of a reserve
     * @param _ltv the new loan to value*
     * @param _reserve the address of the reserve
     */
    setReserveBaseLTVasCollateral: {
      (
        _reserve: string,
        _ltv: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _ltv: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _ltv: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _ltv: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to update the liquidation threshold of a reserve
     * @param _reserve the address of the reserve
     * @param _threshold the new liquidation threshold*
     */
    setReserveLiquidationThreshold: {
      (
        _reserve: string,
        _threshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _threshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _threshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _threshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to update the liquidation bonus of a reserve
     * @param _bonus the new liquidation bonus*
     * @param _reserve the address of the reserve
     */
    setReserveLiquidationBonus: {
      (
        _reserve: string,
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _bonus: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * allows the configurator to update the reserve decimals
     * @param _decimals the decimals of the reserve*
     * @param _reserve the address of the reserve
     */
    setReserveDecimals: {
      (
        _reserve: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
